var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/context.js
var context_exports = {};
__export(context_exports, {
  IconlyContext: () => IconlyContext,
  IconlyProvider: () => IconlyProvider,
  useIconlyTheme: () => useIconlyTheme
});
module.exports = __toCommonJS(context_exports);
var import_react = __toESM(require("react"));
var IconlyContext = (0, import_react.createContext)();
IconlyContext.displayName = "IconlyIconlyContext";
var IconlyProvider = ({
  children,
  primaryColor,
  secondaryColor,
  set,
  size,
  stroke
}) => {
  const defaulValue = {
    primaryColor: primaryColor || "currentColor",
    secondaryColor: secondaryColor || null,
    set: set || "light",
    size: size || "medium",
    stroke: stroke || "regular"
  };
  return /* @__PURE__ */ import_react.default.createElement(IconlyContext.Provider, { value: defaulValue }, children);
};
var useIconlyTheme = () => {
  const context = (0, import_react.useContext)(IconlyContext);
  if (context === void 0) {
    throw new Error(`useIconlyTheme must be used within a IconlyProvider`);
  }
  return context;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IconlyContext,
  IconlyProvider,
  useIconlyTheme
});
